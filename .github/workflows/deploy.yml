name: Deploy to VPS

on:
  workflow_run:
    workflows: Unit Tests
    branches: main
    types: completed

  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

env:
  REGISTRY: "docker.io"
  IMAGE_NAME: "yesiloguz/nnotes-backend"

jobs:
  build_and_push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build container image
      run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push image to Docker Hub
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Install sshpass
      run: sudo apt-get install -y sshpass

    - name: Deploy on VPS
      run: |
        sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << EOF
          # Install Docker if not installed
          if ! command -v docker &> /dev/null
          then
            echo "Docker not found, installing..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo sh -c "echo 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable' > /etc/apt/sources.list.d/docker.list"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          fi

          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker stop nnotes-backend || true
          docker rm nnotes-backend || true
          docker run -p 5005:8000 --env-file ~/env.list -d --name nnotes-backend ${{ env.IMAGE_NAME }}:latest
        EOF
